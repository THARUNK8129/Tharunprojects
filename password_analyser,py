import streamlit as st
import re
import random
import base64
import math

st.set_page_config(page_title="Password Analyser", page_icon="üîê")

# Function to set background image using a web URL
def set_bg_web():
    image_url = "https://i.imgur.com/huhXjQy.jpeg"
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("{image_url}");
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

set_bg_web()

# User authentication
USER_CREDENTIALS = {
    "admin": "password123",
    "user1": "securepass",
    "tharun": "cybersecurity123"
}

# Initialize session state for login
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

# Show login page if user is not logged in
if not st.session_state.logged_in:
    st.title("üîê Login to Access")

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if st.button("Login"):
        if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == password:
            st.session_state.logged_in = True
            st.success("‚úÖ Login successful! Redirecting...")
            st.experimental_rerun()  # Refresh the page to load the analyzer
        else:
            st.error("‚ùå Invalid username or password. Try again!")

# If logged in, show Password Analyzer
if st.session_state.logged_in:
    st.title("üîë Password Analyzer")
    st.markdown("## Welcome! Test Your Password Strength Below.")

    password = st.text_input("Enter your password", type="password")
    feedback = []
    score = 0

    def generate_stronger_password(password):
        """Generate a stronger version of the given password"""
        special_chars = "!@#$%^&*"
        random_special = random.choice(special_chars)
        random_number = str(random.randint(10, 99))
        random_suffix = ''.join(random.choices("abcdefghijklmnopqrstuvwxyz", k=2)).capitalize()
        return password + random_special + random_number + random_suffix

    def estimate_bruteforce_time(password):
        """Estimate the time required to brute-force the given password"""
        charset_size = 0
        if re.search(r'[a-z]', password):
            charset_size += 26  # Lowercase letters
        if re.search(r'[A-Z]', password):
            charset_size += 26  # Uppercase letters
        if re.search(r'\d', password):
            charset_size += 10  # Numbers
        if re.search(r'[!@#$%^&*]', password):
            charset_size += 10  # Special characters (estimated)

        if charset_size == 0:
            return "Instantly cracked"

        # Approximate number of possible combinations
        total_combinations = math.pow(charset_size, len(password))
        
        # Assuming a modern GPU can guess 1 billion (10^9) passwords per second
        guesses_per_second = 1e9
        seconds = total_combinations / guesses_per_second
        
        # Convert seconds to readable time format
        if seconds < 60:
            return f"{seconds:.2f} seconds"
        elif seconds < 3600:
            return f"{seconds / 60:.2f} minutes"
        elif seconds < 86400:
            return f"{seconds / 3600:.2f} hours"
        elif seconds < 31536000:
            return f"{seconds / 86400:.2f} days"
        else:
            return f"{seconds / 31536000:.2f} years"

    if password:
        if len(password) >= 8:
            score += 1
        else:
            feedback.append("Password must contain at least 8 characters.")
        
        if re.search(r'[A-Z]', password) and re.search(r'[a-z]', password):
            score += 1
        else:
            feedback.append("Password should contain both uppercase and lowercase letters.")
        
        if re.search(r'\d', password):
            score += 1
        else:
            feedback.append("Password should contain at least one number.")
        
        if re.search(r'[!@#$%^&*]', password):
            score += 1
        else:
            feedback.append("Password should contain at least one special character (e.g., !@#$%^&*).")
        
        # Generate a stronger suggestion based on user input
        stronger_password = generate_stronger_password(password)

        # Estimate brute-force cracking time
        bruteforce_time = estimate_bruteforce_time(password)

        if score == 4:
            feedback.append("‚úÖ Your password is superb!")
        elif score == 3:
            feedback.append("‚ö†Ô∏è Your password has medium strength. Consider making it stronger.")
            feedback.append(f"üí° Suggested Stronger Password: `{stronger_password}`")
        else:
            feedback.append("‚ùå Your password is weak! Try making it stronger.")
            feedback.append(f"üí° Suggested Stronger Password: `{stronger_password}`")

        # Show feedback and brute-force time estimate
        if feedback:
            st.markdown("## üõ† Suggestions for Improvement")
            for tip in feedback:
                st.write(tip)
        
        st.markdown("## ‚è≥ Estimated Time to Crack Password")
        st.write(f"üîì **Brute-force Time Estimate:** {bruteforce_time}")

    # Logout Button
    if st.button("Logout"):
        st.session_state.logged_in = False
        st.experimental_rerun()  # Refresh the page to go back to login screen
